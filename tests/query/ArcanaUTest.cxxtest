/*
 * tests/query/ArcanaUTest.cxxtest
 *
 * Copyright (C) 2015 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/execution/Instantiator.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class ArcanaUTest: public CxxTest::TestSuite
{
private:
        AtomSpace *as;
        SchemeEval* eval;

public:
    ArcanaUTest(void)
    {
        logger().setLevel(Logger::DEBUG);
        logger().setPrintToStdoutFlag(true);

        as = new AtomSpace();
        eval = new SchemeEval(as);
    }

    ~ArcanaUTest()
    {
        delete eval;
        delete as;
        // Erase the log file if no assertions failed.
        if (!CxxTest::TestTracker::tracker().suiteFailed())
                std::remove(logger().getFilename().c_str());
    }

    void setUp(void);
    void tearDown(void);

    void test_repeats(void);
    void test_const(void);
    void test_dummy(void);
    void test_numeric(void);
};

void ArcanaUTest::tearDown(void)
{
    as->clear();
}

void ArcanaUTest::setUp(void)
{
    as->clear();
    config().set("SCM_PRELOAD",
        "opencog/atoms/base/core_types.scm, "
        "tests/query/test_types.scm, "
        "opencog/scm/utilities.scm,"
        "opencog/scm/opencog/query.scm");

    load_scm_files_from_config(*as);
}

#define getarity(hand) LinkCast(hand)->getArity()

/*
 * Miscellaneous Arcana
 * This one tests a repeated unit in a clause.
 */
void ArcanaUTest::test_repeats(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    config().set("SCM_PRELOAD", "tests/query/arcana-repeat.scm");
    load_scm_files_from_config(*as);

    Handle same = eval->eval_h("(cog-bind (repeat-same))");
    printf("same, num solutions=%d\n", getarity(same));
    TS_ASSERT_EQUALS(1, getarity(same));

    Handle diff = eval->eval_h("(cog-bind (repeat-different))");

    // Either one or two solutions are acceptable, as long as the
    // two are identical. One solution is prefered, but seems
    // not possible with the current algo.
    LinkPtr lll(LinkCast(diff));
    const HandleSeq& oset = lll->getOutgoingSet();
    size_t nsol = oset.size();
    bool pass = false;
    if (1 == nsol) pass = true;
    if (2 == nsol and oset[0] == oset[1]) pass = true;
    printf("diff, num solutions=%zu\n", nsol);
    if (1 <= nsol)
        printf("Solution 1:\n%s\n", oset[0]->toShortString().c_str());
    if (2 == nsol)
        printf("Solution 2:\n%s\n", oset[0]->toShortString().c_str());
    TS_ASSERT_EQUALS(true, pass);

    Handle d3d = eval->eval_h("(cog-bind (repeat-diff-thrice))");
    printf("d3d, num solutions=%d\n", getarity(d3d));
    TS_ASSERT(1 <= getarity(d3d));
    TS_ASSERT(getarity(d3d) <= 3);

    Handle thrice = eval->eval_h("(cog-bind (repeat-thrice))");
    printf("thrice, num solutions=%d\n", getarity(thrice));
    TS_ASSERT_EQUALS(1, getarity(thrice));

    Handle once = eval->eval_h("(cog-bind (repeat-once))");
    printf("once, num solutions=%d\n", getarity(once));
    TS_ASSERT_EQUALS(1, getarity(once));

    // ----
    logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Miscellaneous Arcana
 * This one allows constant terms to trigger a match.
 */
void ArcanaUTest::test_const(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    config().set("SCM_PRELOAD", "tests/query/arcana-const.scm");
    load_scm_files_from_config(*as);

    // ----
    Handle marconi = eval->eval_h("marconi");

    Handle answer = eval->eval_h("(cog-bind who)");
    printf("radio=%s\n", answer->toString().c_str());

    TS_ASSERT_EQUALS(1, getarity(answer));
    LinkPtr lp = LinkCast(answer);
    Handle devel = lp->getOutgoingAtom(0);

    TS_ASSERT_EQUALS(marconi, devel);

    // ----
    // Test DefinedSchemaNode as an answer.
    Handle defans = eval->eval_h("(cog-bind whodfn)");
    printf("defined radio=%s\n", defans->toString().c_str());

    TS_ASSERT_EQUALS(1, getarity(defans));
    TS_ASSERT_EQUALS(defans, answer);

    // ----
    logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Miscellaneous Arcana
 * This one tests addition of mandatory dummy terms.
 */
void ArcanaUTest::test_dummy(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    config().set("SCM_PRELOAD", "tests/query/arcana-dummy.scm");
    load_scm_files_from_config(*as);

    // ----
    Handle answer = eval->eval_h("(cog-execute! dummy)");
    printf("dummy=%s\n", answer->toString().c_str());

    TS_ASSERT_EQUALS(SET_LINK, answer->getType());
    TS_ASSERT_EQUALS(1, getarity(answer));
    LinkPtr lp = LinkCast(answer);
    Handle num = lp->getOutgoingAtom(0);

    Handle fourtwo = eval->eval_h("(Number 42)");
    TS_ASSERT_EQUALS(num, fourtwo);

    // ----
    logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Miscellaneous Arcana
 * This one tests a "typical" behavior tree node.
 */
void ArcanaUTest::test_numeric(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    config().set("SCM_PRELOAD", "tests/query/arcana-numeric.scm");
    load_scm_files_from_config(*as);

    // ----
    Handle sl = eval->eval_h("(StateLink"
                             "   (SchemaNode \"start-interaction-timestamp\")"
                             "   (TimeLink))");
    Instantiator(as).execute(sl);
  
    TruthValuePtr too_soon = eval->eval_tv(
        "(cog-evaluate! (DefinedPredicateNode \"Time to change expression\"))");

    TS_ASSERT_LESS_THAN_EQUALS(too_soon->getMean(), 0.5);

    // The TV needs to change after 2 seconds.... sleep 4 to be safe.
    sleep(4);
    TruthValuePtr too_late = eval->eval_tv(
        "(cog-evaluate! (DefinedPredicateNode \"Time to change expression\"))");
    TS_ASSERT_LESS_THAN_EQUALS(0.5, too_late->getMean());

    // ----
    logger().debug("END TEST: %s", __FUNCTION__);
}
